//index.html

<html lang="en">
  <head>
  	<title>Snake JS </title>
  	<meta charset="utf-8" />
  	<link href='http://fonts.googleapis.com/css?family=Poiret+One' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="css/style.css" />
  </head>
  <body>
  	<h1>Snake JS</h1>
  	<div class="outer-container">
      <div class="scores">
        <span class="current">Current Score: <span class="score">0</span></span>
        <span class="high">High Score: <span class="score">0</span></span>
      </div>
      <div class="snake-world-container">
        <canvas></canvas>
        <div class="message">Press to start</div>
      </div>
    </div>

    <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js" ></script>
    <script src="js/DrawUtil.js"></script>
    <script src="js/SnakeWorldObject.js"></script>
    <script src="js/SnakeFood.js"></script>
    <script src="js/SnakeSection.js"></script>
    <script src="js/Snake.js"></script>
    <script src="js/SnakeGame.js"></script>
    <script src="js/script.js"></script>

    <script src="https://codequotient.com/snake-game-test-suite-bundle.js"></script>
  </body>
</html>

// CSS
// normalize.css

/*! normalize.css v2.0.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/*
 * Corrects `block` display not defined in IE 8/9.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
nav,
section,
summary {
    display: block;
}

/*
 * Corrects `inline-block` display not defined in IE 8/9.
 */

audio,
canvas,
video {
    display: inline-block;
}

/*
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/*
 * Addresses styling for `hidden` attribute not present in IE 8/9.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/*
 * 1. Sets default font family to sans-serif.
 * 2. Prevents iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    font-family: sans-serif; /* 1 */
    -webkit-text-size-adjust: 100%; /* 2 */
    -ms-text-size-adjust: 100%; /* 2 */
}

/*
 * Removes default margin.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/*
 * Addresses `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/*
 * Improves readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/*
 * Addresses `h1` font sizes within `section` and `article` in Firefox 4+,
 * Safari 5, and Chrome.
 */

h1 {
    font-size: 2em;
}

/*
 * Addresses styling not present in IE 8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/*
 * Addresses style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

/*
 * Addresses styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/*
 * Addresses styling not present in IE 8/9.
 */

mark {
    background: #ff0;
    color: #000;
}


/*
 * Corrects font family set oddly in Safari 5 and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    font-size: 1em;
}

/*
 * Improves readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/*
 * Sets consistent quote types.
 */

q {
    quotes: "\201C" "\201D" "\2018" "\2019";
}

/*
 * Addresses inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/*
 * Prevents `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/*
 * Removes border when inside `a` element in IE 8/9.
 */

img {
    border: 0;
}

/*
 * Corrects overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/*
 * Addresses margin not present in IE 8/9 and Safari 5.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/*
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/*
 * 1. Corrects color not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
    border: 0; /* 1 */
    padding: 0; /* 2 */
}

/*
 * 1. Corrects font family not being inherited in all browsers.
 * 2. Corrects font size not being inherited in all browsers.
 * 3. Addresses margins set differently in Firefox 4+, Safari 5, and Chrome
 */

button,
input,
select,
textarea {
    font-family: inherit; /* 1 */
    font-size: 100%; /* 2 */
    margin: 0; /* 3 */
}

/*
 * Addresses Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Corrects inability to style clickable `input` types in iOS.
 * 3. Improves usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
}

/*
 * Re-set default cursor for disabled elements.
 */

button[disabled],
input[disabled] {
    cursor: default;
}

/*
 * 1. Addresses box sizing set to `content-box` in IE 8/9.
 * 2. Removes excess padding in IE 8/9.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
}

/*
 * 1. Addresses `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Addresses `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/*
 * Removes inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/*
 * Removes inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/*
 * 1. Removes default vertical scrollbar in IE 8/9.
 * 2. Improves readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/*
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

//style.css

h1 {
	font-size:80px;
	margin:0;
}

body {
	font-family: 'Poiret One', cursive;
	font-weight: 400;
	background-color:#eeeeee;
}

html > * {
	text-align: center;
	display: block;
	margin-left:auto;
	margin-right:auto;
}

canvas {
	background-image:url('../images/dirt4.jpg');
}

.outer-container {
	margin-top: 10px;
	display: inline-block;
}

.scores {
	font-size: 24px;
}

.scores .current {
	float:left;
}

.scores .high {
	float:right;
}

.snake-world-container {
	margin-top:5px;
	position: relative;
	display: inline-block;
}

.snake-world-container .message {
	cursor:pointer;
	position:absolute;
	font-size:40px;
	color:white;
	background-color: rgba(0, 0, 0, 0.5);
	top:0;
	bottom:0;
	left:0;
	right:0;
	padding-top: 50px;
}

//images
//dirt.jpg
//dirt2.jpg
//dirt3.jpeg
//dirt4.jpg
//food1.png
//food2.png
//food3.png
//snake.png
//snake2.png

// JavaScript

//DrawUtil.js

var EXCESS = 8;
var RADIUS_EXCESS = 2;
var DrawUtil = {

  drawImage: function (context, img, x, y, width, height) {
    context.drawImage(
      img,
      x - EXCESS,
      y - EXCESS,
      width + EXCESS * 2,
      height + EXCESS * 2
    );
  },

  drawCircle: function (context, centerX, centerY, radius, color) {
    context.beginPath();
    context.arc(centerX, centerY, radius + RADIUS_EXCESS, 0, 2 * Math.PI);
    context.fillStyle = color;
    context.fill();
    context.closePath();
  }

};

//Snake.js

var NUM_INITIAL_SECTIONS = 3;
// Directions
var UP = 0;
var UP_KEY_CODE = 38;
var DOWN = 1;
var DOWN_KEY_CODE = 40;
var LEFT = 2;
var LEFT_KEY_CODE = 37;
var RIGHT = 3;
var RIGHT_KEY_CODE = 39;

function Snake() {
  this.img = document.createElement('img');
  this.img.src = 'images/snake2.png';
  this.sections = [];
}

Snake.prototype = new SnakeWorldObject();

Snake.prototype.setupSnake = function(maxX, maxY) {
    var startX= Math.floor(maxX/2);
    var startY=Math.floor(maxY/2);
    this.setX(startX);
    this.setY(startY);
    this.sections=[];
    for(var i=0;i<NUM_INITIAL_SECTIONS;i++)
    {
        var y=startY+i+1;
        this.sections.unshift(new SnakeSection(startX,y));
    }
 
};
Snake.prototype.hasCollided = function(maxX, maxY) {
    var x=this.getX();
    var y=this.getY();
    //out of bound case
    if(x<0||x>=maxX||y<0||y>=maxY)
    {
        return true;
    }

    // collide with its tail case
    for(var i=0;i<this.sections.length;i++)
    {
        if(this.isSameLocation(this.sections[i]))
        {
            return true;
        }
    }

    return false;  
};

Snake.prototype.endMove = function(didGrow) {
  if (!didGrow) {
    this.sections.shift();
  }
};

Snake.prototype.startMove = function() {
  this.direction = this.nextDirection;
  // Move snake here
  var x =this.getX();
  var y =this.getY();
  if(this.direction === UP)
  {
      this.setY(y-1);
  }
  else if(this.direction===DOWN)
  {
      this.setY(y+1);
  }
  else if(this.direction===LEFT)
  {
      this.setX(x-1);
  }
  else if(this.direction===RIGHT)
  {
      this.setX(x+1);
  }
  this.sections.push(new SnakeSection(x,y));

};

Snake.prototype.draw = function(context, spacing) {
  // Draw the complete snake
  for(var i=0;i<this.sections.length;i++)
  {
      this.sections[i].draw(context,spacing);
  }
  DrawUtil.drawImage(
      context,
      this.img,
      spacing * this.getX(),
      spacing * this.getY(),
      spacing, spacing
  );
};

Snake.prototype.init = function(maxX, maxY) {
  this.setupListeners();
  this.setupSnake(maxX, maxY);
};

Snake.prototype.setupListeners = function() {
  this.direction = UP;
  this.nextDirection = UP;
  var snake = this;
  document.addEventListener('keydown', function(e) {
    // Set snake's nextDirection based on keypress.
    if(e.keyCode===UP_KEY_CODE && snake.direction !==DOWN)
    {
        snake.nextDirection = UP;
    }
    else if(e.keyCode===DOWN_KEY_CODE && snake.direction !==UP)
    {
        snake.nextDirection = DOWN;
    }
    else if(e.keyCode===RIGHT_KEY_CODE && snake.direction !==LEFT)
    {
        snake.nextDirection=RIGHT;
    }
    else if( e.keyCode===LEFT_KEY_CODE && snake.direction !==RIGHT)
    {
        snake.nextDirection=LEFT;
    }
    else 
    {
        return;
    }
    e.preventDefault();
  });
};

//SnakeFood.js

function SnakeFood() {
  this.img = document.createElement('img');
  this.img.src = 'images/food1.png';
}
SnakeFood.prototype = new SnakeWorldObject();

SnakeFood.prototype.randomizePosition = function(maxX, maxY) {
  // Set snake food at random positions.
  this.setX(Math.floor(Math.random() * maxX));
  
  this.setY(Math.floor(Math.random() * maxY));
};

SnakeFood.prototype.draw = function(context, spacing) {
  DrawUtil.drawImage(
    context,
    this.img,
    spacing * this.getX(),
    spacing * this.getY(),
    spacing,
    spacing
  );
};

//SnakeGame.js

function SnakeGame($outerContainer, maxX, maxY, spacing) {
  this.maxX = maxX;
  this.maxY = maxY;
  this.spacing = spacing;

  this.$snakeCanvas = $outerContainer.find('canvas');
  this.$message = $outerContainer.find('.message');
  this.$score = $outerContainer.find('.scores .current .score');
  this.$highScore = $outerContainer.find('.scores .high .score');

  var context = this.$snakeCanvas.get(0).getContext('2d');
  context.canvas.width = maxX * spacing;
  context.canvas.height = maxY * spacing;
  if (window.localStorage['snake-high-score']) {
    this.$highScore.html(window.localStorage['snake-high-score']);
  }

  var game = this;
  this.$message.click(function(e) {
    game.start();
  });
}

SnakeGame.prototype.update = function() {
  this.snake.startMove();
  var didGrow = this.snake.isSameLocation(this.food);
  this.snake.endMove(didGrow);
  if (didGrow) {
      this.score+=1;
      this.food.randomizePosition(this.maxX,this.maxY);
    // code reaches here when the snake has grown
    // increment score by 1
    // create the food at a new random location
  }
  return !this.snake.hasCollided(this.maxX,this.maxY);

  // return if the snake is alive or dead, i.e. is game over?
};

SnakeGame.prototype.start = function() {
  this.score = 0;
  this.$message.hide();
  this.snake = new Snake();
  this.snake.init(this.maxX, this.maxY);

  this.food = new SnakeFood();
  this.food.randomizePosition(this.maxX, this.maxY);
  this.loop();
};


SnakeGame.prototype.draw = function() {
  this.$score.html(this.score);
  this.$highScore.html(window.localStorage['snake-high-score']);
  var context = this.$snakeCanvas.get(0).getContext('2d');
  context.clearRect(0, 0, this.spacing * this.maxX, this.spacing * this.maxX);
  this.snake.draw(context, this.spacing);
  this.food.draw(context, this.spacing);
};

SnakeGame.prototype.loop = function() {
  var alive = this.update();

  if (alive) {
    this.draw();
    var game = this;
    setTimeout(function() {
      game.loop();
    }, 200);
  } else {
    this.recordHighScore();
    this.$message.html("Game over. Press to restart.");
    this.$message.show();
  }
};

SnakeGame.prototype.recordHighScore = function() {
    var highScore=window.localStorage['snake-high-score'];
    if(!highScore)
    {
        highScore=0;
    }
  // check local storage for stored high score, data key is: 'snake-high-score'
  // set the initial high score from local storage, else set it to 0
  if (this.score > highScore) {
    // update the high score in local storage
    window.localStorage['snake-high-score']= this.score;
    this.$highScore.html(window.localStorage['snake-high-score']);
  }
};

//SnakeSection.js

var SNAKE_SECTION_GREEN = "#00DD00";

function SnakeSection(x, y) {
  // Set snake section coordinates
  this.setX(x);
  this.setY(y);
}

SnakeSection.prototype = new SnakeWorldObject();

SnakeSection.prototype.draw = function(context, spacing) {
  DrawUtil.drawCircle(
    context,
    spacing * this.getX() + spacing / 2,
    spacing * this.getY() + spacing / 2,
    spacing / 2,
    SNAKE_SECTION_GREEN
  );
};

//SnakeWorldObject.js

/* Base class for objects in Snake World */

function SnakeWorldObject() {}

SnakeWorldObject.prototype.getX = function(x) {
  // return x coordinate
  return this.x;
};
SnakeWorldObject.prototype.getY = function(y) {
  return this.y;
  // return y coordinate
};
SnakeWorldObject.prototype.setX = function(newX) {
  // set current object's x coordinate
  this.x=newX;
};
SnakeWorldObject.prototype.setY = function(newY) {
  // set current object's y coordinate
  this.y=newY;
};
SnakeWorldObject.prototype.draw = function(context,spacing)
 {
     throw 'Not Yet Implemented';
 };

// Requires another SnakeWorldObject
SnakeWorldObject.prototype.isSameLocation = function(snakeWorld) {
    if(snakeWorld.getX()===this.getX()&&snakeWorld.getY()===this.getY())
    {
        return true;
    }
    return false;
  // check if passed object is at the same location as current object.
};

//script.js

var $container = $('.outer-container');
var game = new SnakeGame($container, 20, 20, 30);
